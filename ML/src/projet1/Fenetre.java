/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package projet1;

import java.io.BufferedReader;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStreamReader;
import static java.time.Clock.system;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.sql.ResultSet;

import java.util.Map;
import java.util.Set;
import java.util.TreeMap;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import org.terrier.applications.TRECIndexing;
import org.terrier.applications.TRECQuerying;

import org.terrier.matching.dsms.DocumentScoreModifier;
import org.terrier.structures.BitIndexPointer;
import org.terrier.structures.Index;
import org.terrier.structures.Lexicon;
import org.terrier.structures.LexiconEntry;
import org.terrier.structures.MetaIndex;
import org.terrier.structures.Pointer;
import org.terrier.structures.PostingIndex;
import org.terrier.structures.postings.BlockPosting;
import org.terrier.structures.postings.IterablePosting;
import org.terrier.utility.ApplicationSetup;

/**
 *
 * @author acer
 */
public class Fenetre extends javax.swing.JFrame {

    /**
     * Creates new form Fenetre
     */
    public Fenetre() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        Apprentissage = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setText("Indexation");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Recherche");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        Apprentissage.setText("Apprentissage");
        Apprentissage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ApprentissageActionPerformed(evt);
            }
        });

        jButton3.setText("Prior scores ");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Combinaison des score");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(230, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jButton4)
                        .addGap(210, 210, 210))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jButton3)
                            .addComponent(Apprentissage))
                        .addGap(239, 239, 239))))
            .addGroup(layout.createSequentialGroup()
                .addGap(250, 250, 250)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(75, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addGap(18, 18, 18)
                .addComponent(jButton2)
                .addGap(18, 18, 18)
                .addComponent(Apprentissage)
                .addGap(18, 18, 18)
                .addComponent(jButton3)
                .addGap(18, 18, 18)
                .addComponent(jButton4)
                .addGap(75, 75, 75))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        System.setProperty("terrier.home", "C:/terrier-3.5");
        System.setProperty("terrier.index.path", "C:/terrier-3.5/var/index");
        System.setProperty("terrier.index.prefix", "data");
        //System.setProperty("terrier.etc", "D:/WSJ/terrier/etc");
        System.setProperty("collection.spec", "C:/terrier-3.5/etc/collection.spec");
        System.setProperty("max.term.length", "40");
        System.setProperty("termcodes.initialcapacity", "30000000");
        System.setProperty("ignore.low.idf.terms", "true");
        System.setProperty("indexer.meta.forward.keys", "docno");

        TRECIndexing Trc = new TRECIndexing();
        Trc.index();

        System.out.println("-###########################################-");
        System.out.println("INDEXATION TERMINEE");
        System.out.println("-###########################################-");
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        /*System.setProperty("terrier.home", "C:/terrier-3.5");
        System.setProperty("terrier.index.path", "C:/terrier-3.5/var/index");
        System.setProperty("terrier.index.prefix", "data");
        System.setProperty("ignore.low.idf.terms", "true");
        System.setProperty("indexer.meta.forward.keys", "docno");
        
        TRECQuerying Trc = new TRECQuerying();
        Trc.processQueries();
        System.out.println("-###########################################-");
        System.out.println("Recherche TERMINEE");
        System.out.println("-###########################################-");*/
        System.setProperty("terrier.home", "C:/terrier-3.5");
        System.setProperty("terrier.index.path", "C:/terrier-3.5/var/index");
        System.setProperty("terrier.index.prefix", "data");
        System.setProperty("Dmatching.dsms","IntegrateStaticScore2");
        System.setProperty("ignore.low.idf.terms", "true");
        //System.setProperty("indexer.meta.forward.keys", "docno");
        //System.setProperty("trec.model","BM25");
        System.setProperty("trec.matching","OldBasicMatchingExtends");
        System.setProperty("trec.model","DirichletLM");
        
        TRECQuerying Trc = new TRECQuerying();
        Trc.processQueries();
        
        System.out.println("-###########################################-");
        System.out.println("Recherche TERMINEE");
        System.out.println("-###########################################-");
    }//GEN-LAST:event_jButton2ActionPerformed

    private void ApprentissageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ApprentissageActionPerformed
        //Lecture du fichier qrels
        FileInputStream fstream = null;

        try {
            fstream = new FileInputStream("C:/terrier4.2/qrel-51-151-AP.txt");
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Fenetre.class.getName()).log(Level.SEVERE, null, ex);
        }
        BufferedReader br = new BufferedReader(new InputStreamReader(fstream));
        String strLine;
        String iddoc;
        String pertinence;
        //Creation de la Map
        Map<String, String> qrel = new HashMap<String, String>();
        //lire le fichier qrel ligne par ligne et remplir la Map
        try {
            while ((strLine = br.readLine()) != null) {
                String contenu[] = strLine.split(" ");
                iddoc = contenu[2];
                pertinence = contenu[3];
                // iddoc=strLine.substring(strLine.length()-15,strLine.length()-2);
                //  pertinence=strLine.substring(strLine.length() -1);
                qrel.put(iddoc, pertinence);

            }
        } catch (IOException ex) {
            Logger.getLogger(Fenetre.class.getName()).log(Level.SEVERE, null, ex);
        }

        /*   for (Map.Entry mapentry : qrel.entrySet()) {
            System.out.println("Id document: " + mapentry.getKey()
                    + " | Pertinence: " + mapentry.getValue());

        }/*
        
         */
        // TODO add your handling code here:
        System.setProperty("terrier.home", "C:/terrier-3.5");
        System.setProperty("terrier.index.path", "C:/terrier-3.5/var/index");
        System.setProperty("terrier.index.prefix", "data");
        Index index = Index.createIndex();
        MetaIndex meta = index.getMetaIndex();

        PostingIndex di = index.getDirectIndex();
        org.terrier.structures.DocumentIndex doi = index.getDocumentIndex();

        Lexicon<String> lex = index.getLexicon();
        int docid = 0; //docids are 0-based
        IterablePosting postings = null;
        //Map etape1
        Map<String, List<Double>> etape1 = new HashMap<String, List<Double>>();
        int conteur = 0;
        while (docid < doi.getNumberOfDocuments() ) {

            try {
                String docno = meta.getItem("docno", docid);
                if (qrel.containsKey(docno)) {
                    //   System.out.println("docno ="+docno);
                    //  System.out.println(docno+" "+qrel.get(docno));
                    //arrayList des idf
                    List<Double> idfTerms = new ArrayList<Double>();
                    //arrayList des tf
                    List<Double> tfTerms = new ArrayList<Double>();
                    /// le doc est dans la map
                    postings = di.getPostings(doi.getDocumentEntry(docid));
                    //DocLength
                    double docLength = postings.getDocumentLength();
                    double SommeIDF = 0;
                    int nbrTermesLex = 0;
                    int SommeTf = 0;
                    double Entr = 0;
                    double termuni = 0;
                    while (postings.next() != IterablePosting.EOL) {
                        Map.Entry<String, LexiconEntry> lee = lex.getLexiconEntry(postings.getId());
                        //TermesUniques
                        termuni++;
                        // dans combien de document le term actuel occur
                        LexiconEntry le = lex.getLexiconEntry(lee.getKey());
                        int nbrOccur = 0;
                        if (le != null) {
                            nbrOccur = le.getDocumentFrequency();
                        } else {
                            System.out.println("Term " + lee.getKey() + " does not occur");
                        }
                        double tf = postings.getFrequency();
                        //Calcul IDF
                        double idf = Math.log((double) index.getCollectionStatistics().getNumberOfDocuments() / nbrOccur);
                        tfTerms.add(tf);
                        idfTerms.add(idf);
                        SommeIDF += idf;
                        nbrTermesLex++;
                    }
                    double MoyenneIDF = (double) SommeIDF / nbrTermesLex;
                    double MoyenneEcartTypeIDF = 0;

                    for (double idf : idfTerms)//somme
                    {
                        MoyenneEcartTypeIDF += (double) Math.pow(idf - MoyenneIDF, 2) / idfTerms.size();
                    }

                    double EcartTypeIDF = Math.sqrt(MoyenneEcartTypeIDF);
                    //TF
                    double MoyenneTf = docLength / nbrTermesLex;
                    double MoyenneEcartTypeTF = 0;
                    double entr = 0;
                    for (double tf : tfTerms) {
                        //entropie
                        entr += -(tf / docLength) * Math.log(tf / docLength);
                        //moyenne ecart type
                        MoyenneEcartTypeTF += Math.pow((tf - MoyenneTf), 2) / tfTerms.size();
                    }
                    double EcartTypeTF = Math.sqrt(MoyenneEcartTypeTF);
                    double TfMin = (double) Collections.min(tfTerms);
                    double TfMax = (double) Collections.max(tfTerms);
                    double Rapp = (double) TfMin / TfMax;
                    etape1.put(docno, new ArrayList<Double>(Arrays.asList(docLength, termuni, MoyenneIDF, EcartTypeIDF, EcartTypeTF, Rapp, entr, Double.valueOf(qrel.get(docno)))));
                    if (conteur % 100 == 0) {
                        System.out.println(docno + " running put      -------------------------");
                    }
                    conteur++;

                } else {
                    //System.out.println("ocument non trouvé"+docno);

                }
            } catch (IOException ex) {
                Logger.getLogger(JFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
            docid++;
        }
        
        for (Map.Entry<String, List<Double>> entry : etape1.entrySet()) {
            String myKey = entry.getKey();
            List<Double> myList = entry.getValue();
            System.out.println("the key is : " + myKey);
            for (Double val : myList) {
                System.out.println(val);

            }
        }
        /*
        //Create blank workbook
        XSSFWorkbook workbook = new XSSFWorkbook();
        //Create a blank sheet
        XSSFSheet spreadsheet = workbook.createSheet("donnes");
        //Create row object
        XSSFRow row;
        Set< String> keyid = etape1.keySet();
        int rowid = 0;
        for (String key : keyid) {
            row = spreadsheet.createRow(rowid++);
            List<Double> valeur = etape1.get(key);
            int cellid = 0;
            for (Double liste : valeur) {
                Cell cell = row.createCell(cellid++);
                cell.setCellValue(key);
                cell.setCellValue(liste);
            }
        }
        //Write the workbook in file system
        FileOutputStream out = null;
        try {
            out = new FileOutputStream(
                    new File("C:/poiexcel/Writesheet.xlsx"));
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Fenetre.class.getName()).log(Level.SEVERE, null, ex);
        }

        try {
            workbook.write(out);
        } catch (IOException ex) {
            Logger.getLogger(Fenetre.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            out.close();
        } catch (IOException ex) {
            Logger.getLogger(Fenetre.class.getName()).log(Level.SEVERE, null, ex);
        }
        System.out.println("Writesheet.xlsx written successfully");
        */
    }//GEN-LAST:event_ApprentissageActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        FileInputStream fstream = null;

        try {
            fstream = new FileInputStream("C:/terrier4.2/qrel-51-151-AP.txt");
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Fenetre.class.getName()).log(Level.SEVERE, null, ex);
        }
        BufferedReader br = new BufferedReader(new InputStreamReader(fstream));
        String strLine;
        String iddoc;
        String pertinence;
        //Creation de la Map
        Map<String, String> qrel = new HashMap<String, String>();
        //lire le fichier qrel ligne par ligne et remplir la Map
        try {
            while ((strLine = br.readLine()) != null) {
                String contenu[] = strLine.split(" ");
                iddoc = contenu[2];
                pertinence = contenu[3];
                // iddoc=strLine.substring(strLine.length()-15,strLine.length()-2);
                //  pertinence=strLine.substring(strLine.length() -1);
                int pert = Integer.parseInt(pertinence);
                //if(pert==0){
                qrel.put(iddoc, pertinence);
                //}else{
                   //System.out.println(" pertinent");
                //}
            }
        } catch (IOException ex) {
            Logger.getLogger(Fenetre.class.getName()).log(Level.SEVERE, null, ex);
        }
        System.setProperty("terrier.home", "C:/terrier-3.5");
        System.setProperty("terrier.index.path", "C:/terrier-3.5/var/index");
        System.setProperty("terrier.index.prefix", "data");
        Index index = Index.createIndex();
        MetaIndex meta = index.getMetaIndex();
      

        PostingIndex di = index.getDirectIndex();
        org.terrier.structures.DocumentIndex doi = index.getDocumentIndex();

        Lexicon<String> lex = index.getLexicon();
        int docid = 0; //docids are 0-based
        int nbrDoc = 0;
        double valeur = 0;
        double sigmoide = 0;
        IterablePosting postings = null;
        Map<String, Double> score = new HashMap<String, Double>();

        double coef1 = 0.008532894;
        double coef2 = -0.01885888;
        double coef3 = -0.5596745;
        double coef4 = 0.4461014;
        double coef5 = -0.6841965;
        double coef6 = -1.294921;
        double coef7 = 1.477738;
        Properties prop = new Properties();
        while (docid < doi.getNumberOfDocuments()) {
            List<Double> idfTerms = new ArrayList<Double>();
            List<Integer> tfTerms = new ArrayList<Integer>();

            try {
                postings = di.getPostings(doi.getDocumentEntry(docid));

            } catch (IOException ex) {
                Logger.getLogger(JFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
            try {
                //NB: postings will be null if the document is empty
                String docno = meta.getItem("docno", docid);
                //if (qrel.containsKey(docno)) {
                    double SommeIDF = 0;
                    int nbrTermesLex = 0;
                    int SommeTf = 0;
                    double termuni = 0;
                    while (postings.next() != IterablePosting.EOL) {
                        Map.Entry<String, LexiconEntry> lee = lex.getLexiconEntry(postings.getId());
                        // dans combien de document le term actuel occur
                        LexiconEntry le = lex.getLexiconEntry(lee.getKey());
                        termuni++;
                        int nbrOccur = 0;
                        if (le != null) {
                            nbrOccur = le.getDocumentFrequency();
                        } else {
                            System.out.println("Term " + lee.getKey() + " does not occur");
                        }
                        //Calcul IDF
                        double idf = Math.log((double) index.getCollectionStatistics().getNumberOfDocuments() / nbrOccur);
                        tfTerms.add(postings.getFrequency());
                        idfTerms.add(idf);
                        SommeTf += postings.getFrequency();
                        SommeIDF += idf;
                        nbrTermesLex++;

                    }
                    //Doc Length
                    double docLength = postings.getDocumentLength();
                    //IDF
                    double MoyenneIDF = (double) SommeIDF / nbrTermesLex;
                    double MoyenneEcartTypeIDF = 0;

                    for (double idf : idfTerms) {
                        MoyenneEcartTypeIDF += (double) Math.pow(idf - MoyenneIDF, 2) / idfTerms.size();
                    }

                    double EcartTypeIDF = Math.sqrt(MoyenneEcartTypeIDF);

                    //TF
                    double MoyenneTf = SommeTf / nbrTermesLex;
                    double MoyenneEcartTypeTF = 0;
                    double entr = 0;
                    for (double tf : tfTerms) {
                        //entropie
                        entr -= (tf / docLength) * Math.log(tf / docLength);
                        //moyenne ecart type
                        MoyenneEcartTypeTF += Math.pow((tf - MoyenneTf), 2) / tfTerms.size();
                    }
                    double EcartTypeTF = Math.sqrt(MoyenneEcartTypeTF);
                    double TfMin = (double) Collections.min(tfTerms);
                    double TfMax = (double) Collections.max(tfTerms);
                    double Rapp = (double) TfMin / TfMax;
                    //valeur = coef1 * docLength + coef2 * termuni + coef3 * MoyenneIDF + coef4 * EcartTypeIDF+coef5*EcartTypeTF+coef6*Rapp+coef7*entr;  
                   valeur =coef2 * termuni +coef5*EcartTypeTF+coef6*Rapp+coef7*entr;
                     
                    sigmoide = 1 / (1 + Math.exp(-valeur));
                    if (score.get(docno) == null) {
                        score.put(docno, sigmoide);
                        
                       
                    }
                    if (docid %1000==0)
                    System.out.println(docno + " running put      -------------------------");  
        
               // }

            } catch (IOException ex) {
                Logger.getLogger(JFrame.class.getName()).log(Level.SEVERE, null, ex);
            }

            docid++;
        }
        for (Map.Entry<String, Double> entry : score.entrySet()) {
            String myKey = entry.getKey();
            Double monScore = entry.getValue();
            System.out.println("the key is : " + myKey);
            System.out.println("Le score est de " + monScore);
            String monsc = String.valueOf(monScore);
            prop.put(myKey,monsc);
            try {
                prop.store(new FileOutputStream ("C://poiexcel/data.properties"),null);
                
            } catch (FileNotFoundException ex) {
                Logger.getLogger(Fenetre.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(Fenetre.class.getName()).log(Level.SEVERE, null, ex);
            }
                  
        }
        System.out.println("fichier créer avec succés");
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        System.setProperty("terrier.home", "C:/terrier-3.5");
        System.setProperty("terrier.index.path", "C:/terrier-3.5/var/index");
        System.setProperty("terrier.index.prefix", "data");
        System.setProperty("Dmatching.dsms","IntegrateStaticScore");
        System.setProperty("ignore.low.idf.terms", "true");
        //System.setProperty("indexer.meta.forward.keys", "docno");
        //System.setProperty("trec.model","BM25");
        System.setProperty("trec.matching","OldBasicMatchingExtends");
        System.setProperty("trec.model","DirichletLM");
        
        TRECQuerying Trc = new TRECQuerying();
        Trc.processQueries();
        
        System.out.println("-###########################################-");
        System.out.println("Recherche TERMINEE");
        System.out.println("-###########################################-");
         // TODO add your handling code here:
    }//GEN-LAST:event_jButton4ActionPerformed

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Fenetre.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        java.awt.EventQueue.invokeLater(() -> {
            new Fenetre().setVisible(true);
        });
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Apprentissage;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    // End of variables declaration//GEN-END:variables

   
}
